---
- name: Ansible playbook for contditonal operations
  hosts: 127.0.0.1
  become: true
  debugger: on_failed
  serial: "10%"
  vars_files:
    - ./vars/variable.yml

#  tasks:
#   - name: Reboot the server
#     shell: /sbin/shutdown -r now

  tasks:
   - name: "OS distirbution"
     shell: "ls"
     register: output
     when: ansible_facts['os_family'] == "Debian"
   - debug: var=output.stdout_lines

   - name: "Ansible major version"
     shell: "ls -lrt"
     register: output
     when: ansible_facts['distribution_major_version'] == "18"
#   - debug: var=ansible_facts
   - debug: var=ansible_facts['distribution_major_version']
   - debug: var=ansible_facts['architecture']
   - debug: var=ansible_facts['lsb']['major_release']

   - name: Ansible loops
     command: echo {{ item }}
     loop: [0,2,4,6,8,10]
     when: item > 5

   - name: Loops
     command: echo {{ item }}
     loop: "{{ [1,2]|default([]) }}"
     when: item > 5

   - name: Dict
     command: echo {{ item.key }}
     loop: "{{ query('dict', mydict|default({})) }}"
     when: item.value > 5

   - name: Loop 
     command: echo {{ item }}
     with_items:
      - 1
      - [2,3]
      - 4
   - name: Loop with flatten
     command: echo {{ item }}
     loop: "{{ [1,[2,3],4] }}" #| flatten(1) }}"

   - name: with lookup
     command: echo {{ item }}
     loop: "{{ lookup('fileglob', '*.yml', wantlist=True) }}"
   - name: with fileglob
     command: echo {{ item }}
     with_fileglob: '*.yml'

#Adduser to the system
   - name: Adding users
     user:
       name: "{{ item }}"
       state: present
       #state: absent
     loop: 
       - ramesh
       - akku
     #become: true
     #become_user: root
     #become_method: su

#Iterating over a list of hashes
#If you have a list of hashes, you can reference subkeys in a loop. For example:

   - name: add several users
     user:
       name: "{{ item.name }}"
       state: present
       #state: absent
       groups: "{{ item.groups }}"
     loop:
       - { name: 'testuser1', groups: 'sadashiv' }
       - { name: 'testuser2', groups: 'sadashiv' }
     #become: true

#   - name: optimal yum
#     #yum:
#     apt:
#       name: update
#       state: present

   - name: optimal yum
     #yum:
     apt:
       name: "{{  list_of_packages  }}"
       state: present

#   - name: non-optimal yum, slower and may cause issues with interdependencies
#     yum:
#     name: "{{  item  }}"
#     state: present
#     loop: "{{  list_of_packages  }}"

   - shell: "echo {{ item }}"
     loop:
       - "one"
       - "two"
     register: echo

   - name: Fail if return code is not 0
     fail:
       msg: "The command ({{ item.cmd }}) did not have a 0 return code"
     when: item.rc != 0
     loop: "{{ echo.results }}"

   - shell: echo {{ item }}
     loop:
        - one
        - two
     register: echo
     loop_control:
       label: "{{ item }}"
     changed_when: echo.stdout != "one"

# show all the hosts in the inventory
   - debug:
       msg: "{{ item }}"
     loop: "{{ groups['all'] }}"

# show all the hosts in the current play
   - debug:
       msg: "{{ item }}"
     loop: "{{ ansible_play_batch }}"

# show all the hosts in the inventory
   - debug:
       msg: "{{ item }}"
     loop: "{{ query('inventory_hostnames', 'all') }}"

# show all the hosts matching the pattern, ie all but the group www
   - debug:
       msg: "{{ item }}"
     loop: "{{ query('inventory_hostnames', 'all:!www') }}"

   - debug:
       msg: "{{ item }}"
     loop: "{{ lookup('inventory_hostnames', 'all', wantlist=True) }}"

   - name: create servers, pause 3s before creating next
     user:
       name: "{{ item }}"
       state: present
     loop:
       - server1
       - server2
     loop_control:
       pause: 3

#with_list is directly replaced by loop.
   - name: with_list
     debug:
       msg: "{{ item }}"
     with_list:
       - one
       - two

   - name: with_list -> loop
     debug:
       msg: "{{ item }}"
     loop:
       - one
       - two

#with_items is replaced by loop and the flatten filter.

   - name: with_items
     debug:
       msg: "{{ item }}"
     with_items: "{{ items }}"

   - name: with_items -> loop
     debug:
       msg: "{{ item }}"
     #loop: "{{ [1,2,3]|flatten(levels=1) }}"
     loop: "{{ items|flatten(levels=1) }}"

#with_indexed_items
#with_indexed_items is replaced by loop, the flatten filter and loop_control.index_var.

   - name: with_indexed_items
     debug:
       msg: "{{ item.0 }} - {{ item.1 }}"
     with_indexed_items: "{{ items }}"

   - name: with_indexed_items -> loop
     debug:
       msg: "{{ index }} - {{ item }}"
     loop: "{{ items|flatten(levels=1) }}"
     loop_control:
       index_var: index

#with_flattened
#with_flattened is replaced by loop and the flatten filter.

   - name: with_flattened
     debug:
       msg: "{{ item }}"
     with_flattened: "{{ items }}"

   - name: with_flattened -> loop
     debug:
       msg: "{{ item }}"
     loop: "{{ items|flatten }}"

#with_together is replaced by loop and the zip filter.

   - name: with_together
     debug:
       msg: "{{ item.0 }} - {{ item.1 }}"
     with_together:
       - "{{ list_one }}"
       - "{{ list_two }}"

   - name: with_together -> loop
     debug:
       msg: "{{ item.0 }} - {{ item.1 }}"
     loop: "{{ list_one|zip(list_two)|list }}"

#with_dict can be substituted by loop and either the dictsort or dict2items filters.

   - name: with_dict
     debug:
       msg: "{{ item.key }} - {{ item.value }}"
     with_dict: "{{ dictionary }}"

   - name: with_dict -> loop (option 1)
     debug:
       msg: "{{ item.key }} - {{ item.value }}"
     loop: "{{ dictionary|dict2items }}"

   - name: with_dict -> loop (option 2)
     debug:
       msg: "{{ item.0 }} - {{ item.1 }}"
     loop: "{{ dictionary|dictsort }}"

#with_sequence is replaced by loop and the range function, and potentially the format filter.

   - name: with_sequence
     debug:
       msg: "{{ item }}"
     with_sequence: start=0 end=4 stride=2 format=testuser%02x

   - name: with_sequence -> loop
     debug:
       msg: "{{ 'testuser%02x' | format(item) }}"
     loop: "{{ range(0, 4 + 1, 2)|list }}"
     # range is exclusive of the end point

#with_subelements is replaced by loop and the subelements filter.
#
#   - name: with_subelements
#     debug:
#       msg: "{{ item.0.name }} - {{ item.1 }}"
#     with_subelements:
#       - "{{ users }}"
#       - mysql.hosts
#
#- name: with_subelements -> loop
#  debug:
#    msg: "{{ item.0.name }} - {{ item.1 }}"
#  loop: "{{ users|subelements('mysql.hosts') }}"

#with_nested and with_cartesian are replaced by loop and the product filter.
#
#- name: with_nested
#  debug:
#    msg: "{{ item.0 }} - {{ item.1 }}"
#  with_nested:
#    - "{{ list_one }}"
#    - "{{ list_two }}"
#
#- name: with_nested -> loop
#  debug:
#    msg: "{{ item.0 }} - {{ item.1 }}"
#  loop: "{{ list_one|product(list_two)|list }}"

#with_random_choice is replaced by just use of the random filter, without need of loop.
#
#- name: with_random_choice
#  debug:
#    msg: "{{ item }}"
#  with_random_choice: "{{ my_list }}"
#
#- name: with_random_choice -> loop (No loop is needed here)
#  debug:
#    msg: "{{ my_list|random }}"
#  tags: random
...
